<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class amiguetesPtuitBundleEntityMiniUrlProxy extends \amiguetes\PtuitBundle\Entity\MiniUrl implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setUrl($url)
    {
        $this->__load();
        return parent::setUrl($url);
    }

    public function getUrl()
    {
        $this->__load();
        return parent::getUrl();
    }

    public function setMini($mini)
    {
        $this->__load();
        return parent::setMini($mini);
    }

    public function getMini()
    {
        $this->__load();
        return parent::getMini();
    }

    public function setExpira($expira)
    {
        $this->__load();
        return parent::setExpira($expira);
    }

    public function getExpira()
    {
        $this->__load();
        return parent::getExpira();
    }

    public function setUsuarioid(\amiguetes\PtuitBundle\Entity\Usuario $usuarioid)
    {
        $this->__load();
        return parent::setUsuarioid($usuarioid);
    }

    public function getUsuarioid()
    {
        $this->__load();
        return parent::getUsuarioid();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'url', 'mini', 'expira', 'usuarioid');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}