<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class amiguetesPtuitBundleEntityUsuarioProxy extends \amiguetes\PtuitBundle\Entity\Usuario implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getRoles()
    {
        $this->__load();
        return parent::getRoles();
    }

    public function getSalt()
    {
        $this->__load();
        return parent::getSalt();
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function eraseCredentials()
    {
        $this->__load();
        return parent::eraseCredentials();
    }

    public function equals(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->__load();
        return parent::equals($user);
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setNick($nick)
    {
        $this->__load();
        return parent::setNick($nick);
    }

    public function getNick()
    {
        $this->__load();
        return parent::getNick();
    }

    public function setPassword($pass)
    {
        $this->__load();
        return parent::setPassword($pass);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setAvatar($avatar)
    {
        $this->__load();
        return parent::setAvatar($avatar);
    }

    public function getAvatar()
    {
        $this->__load();
        return parent::getAvatar();
    }

    public function addMensajesFavoritos(\amiguetes\PtuitBundle\Entity\Mensaje $mensaje)
    {
        $this->__load();
        return parent::addMensajesFavoritos($mensaje);
    }

    public function getMensajesFavoritos()
    {
        $this->__load();
        return parent::getMensajesFavoritos();
    }

    public function addSeguidores(\amiguetes\PtuitBundle\Entity\Usuario $seguidores)
    {
        $this->__load();
        return parent::addSeguidores($seguidores);
    }

    public function getSeguidores()
    {
        $this->__load();
        return parent::getSeguidores();
    }

    public function addSeguidos(\amiguetes\PtuitBundle\Entity\Usuario $seguidos)
    {
        $this->__load();
        return parent::addSeguidos($seguidos);
    }

    public function getSeguidos()
    {
        $this->__load();
        return parent::getSeguidos();
    }

    public function addMensajesRecibidos(\amiguetes\PtuitBundle\Entity\Mensaje_Interno $mensajesRecibidos)
    {
        $this->__load();
        return parent::addMensajesRecibidos($mensajesRecibidos);
    }

    public function getMensajesRecibidos()
    {
        $this->__load();
        return parent::getMensajesRecibidos();
    }

    public function addMensajesEnviados(\amiguetes\PtuitBundle\Entity\Mensaje_Interno $mensajesEnviados)
    {
        $this->__load();
        return parent::addMensajesEnviados($mensajesEnviados);
    }

    public function getMensajesEnviados()
    {
        $this->__load();
        return parent::getMensajesEnviados();
    }

    public function addMensajesReplicados(\amiguetes\PtuitBundle\Entity\Mensaje $mensajesReplicados)
    {
        $this->__load();
        return parent::addMensajesReplicados($mensajesReplicados);
    }

    public function getPerfil()
    {
        $this->__load();
        return parent::getPerfil();
    }

    public function setPerfil($perfil)
    {
        $this->__load();
        return parent::setPerfil($perfil);
    }

    public function getMensajesReplicados()
    {
        $this->__load();
        return parent::getMensajesReplicados();
    }

    public function serialize()
    {
        $this->__load();
        return parent::serialize();
    }

    public function unserialize($strSerialized)
    {
        $this->__load();
        return parent::unserialize($strSerialized);
    }

    public function setPass($pass)
    {
        $this->__load();
        return parent::setPass($pass);
    }

    public function getPass()
    {
        $this->__load();
        return parent::getPass();
    }

    public function addGrupos(\amiguetes\PtuitBundle\Entity\Grupo $grupos)
    {
        $this->__load();
        return parent::addGrupos($grupos);
    }

    public function getGrupos()
    {
        $this->__load();
        return parent::getGrupos();
    }

    public function addGruposAdministrados(\amiguetes\PtuitBundle\Entity\Grupo $gruposAdministrados)
    {
        $this->__load();
        return parent::addGruposAdministrados($gruposAdministrados);
    }

    public function getGruposAdministrados()
    {
        $this->__load();
        return parent::getGruposAdministrados();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'nick', 'pass', 'email', 'perfil', 'avatar', 'mensajesFavoritos', 'Seguidores', 'Seguidos', 'mensajesRecibidos', 'mensajesEnviados', 'mensajesReplicados', 'grupos', 'gruposAdministrados');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}